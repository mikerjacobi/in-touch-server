// Code generated by goagen v1.1.0-dirty, command line:
// $ goagen
// --design=github.com/mikerjacobi/in-touch-server/design
// --out=$(GOPATH)/src/github.com/mikerjacobi/in-touch-server
// --version=v1.1.0-dirty
//
// API "adder": auth Resource Client
//
// The content of this file is auto-generated, DO NOT MODIFY

package client

import (
	"bytes"
	"fmt"
	"golang.org/x/net/context"
	"net/http"
	"net/url"
)

// PostAuthPayload is the auth post action payload.
type PostAuthPayload struct {
	Password string `form:"password" json:"password" xml:"password"`
	Username string `form:"username" json:"username" xml:"username"`
}

// PostAuthPath computes a request path to the post action of auth.
func PostAuthPath() string {

	return fmt.Sprintf("/login")
}

// get friend by id
func (c *Client) PostAuth(ctx context.Context, path string, payload *PostAuthPayload) (*http.Response, error) {
	req, err := c.NewPostAuthRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewPostAuthRequest create the request corresponding to the post action endpoint of the auth resource.
func (c *Client) NewPostAuthRequest(ctx context.Context, path string, payload *PostAuthPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	return req, nil
}
